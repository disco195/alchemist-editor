{"version":3,"sources":["serviceWorker.js","index.tsx","App.tsx","Editor.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","re_resizable__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_Button__WEBPACK_IMPORTED_MODULE_2___default","_material_ui_icons_PlayArrow__WEBPACK_IMPORTED_MODULE_3__","_material_ui_icons_PlayArrow__WEBPACK_IMPORTED_MODULE_3___default","_App_css__WEBPACK_IMPORTED_MODULE_4__","_App_css__WEBPACK_IMPORTED_MODULE_4___default","_Editor__WEBPACK_IMPORTED_MODULE_5__","demo","code","onChange","newValue","execute","e","t","bind","alchemist","Stack","Queue","Index","eval","error","console","message","height","backgroundColor","editor","defaultSize","width","enable","right","style","alignItems","justifyContent","borderRight","float","maxWidth","defaultValue","display","id","minWidth","color","main","Fragment","onClick","variant","react_ace__WEBPACK_IMPORTED_MODULE_1__","react_ace__WEBPACK_IMPORTED_MODULE_1___default","__webpack_exports__","props","mode","theme","fontSize","editorProps","$blockScrolling","setOptions","fontFamily","dragEnabled","dragDelay"],"mappings":"sJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,yFEnInB,IAAAC,mCAAAC,oBAAA,GAAAC,2CAAAD,oBAAAE,EAAAH,oCAAAI,0CAAAH,oBAAA,IAAAI,sDAAAJ,oBAAA,IAAAK,8DAAAL,oBAAAE,EAAAE,uDAAAE,0DAAAN,oBAAA,IAAAO,kEAAAP,oBAAAE,EAAAI,2DAAAE,sCAAAR,oBAAA,IAAAS,8CAAAT,oBAAAE,EAAAM,uCAAAE,qCAAAV,oBAAA,IAQMW,KAAI,s5DAoFNC,KAAOD,KACX,SAASE,SAASC,GAChBF,KAAOE,EAGT,IAAMC,QAAU,SAAVA,UACJf,oBAAAgB,EAAA,GAAApB,KAAAI,oBAAAiB,EAAAC,KAAA,aAAyBtB,KAAK,SAAAuB,WAC5B,IAAMC,MAAQD,UAAUC,MAClBC,MAAQF,UAAUE,MAClBC,MAAQH,UAAUG,MAExB,IACEC,KAAKX,MACL,MAAOY,OACPC,QAAQD,MAAMA,MAAME,aAKpBC,OAAS,IACTC,gBAAkB,UAElBC,OACJ5B,2CAAAb,EAAAC,cAACc,0CAAA,EAAD,CACE2B,YAAa,CAAEH,cAAQI,MAAO,OAC9BC,OAAQ,CAAEC,OAAO,GACjBC,MAAO,CACLC,WAAY,SACZC,eAAgB,SAChBC,YAAa,iBACbC,MAAO,OACPC,SAAU,QAGZtC,2CAAAb,EAAAC,cAACqB,qCAAA,EAAD,CAAQG,SAAUA,SAAU2B,aAAc7B,QAIxC8B,QACJxC,2CAAAb,EAAAC,cAAA,OAAKqD,GAAG,UAAUR,MAAO,CACvBN,gCACAD,cACAgB,SAAU,KACVC,MAAO,WAKLC,KACJ5C,2CAAAb,EAAAC,cAAA,OAAK6C,MAAO,CAAEH,MAAO,OAAQJ,OAAQ,SAClCE,OACAY,SAICnD,IAAM,WACV,OACEW,2CAAAb,EAAAC,cAACY,2CAAAb,EAAM0D,SAAP,KACE7C,2CAAAb,EAAAC,cAACgB,8DAAAjB,EAAD,CAAQ2D,QAAShC,QAASiC,QAAQ,YAChC/C,2CAAAb,EAAAC,cAACkB,kEAAAnB,EAAD,YADF,QAGCyD,OAKQvD,2DC9Jf,IAAAS,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAkD,EAAAjD,EAAA,IAAAkD,EAAAlD,EAAAE,EAAA+C,GAAAjD,EAAA,IAAAA,EAAA,IAeemD,EAAA,WAACC,GAAD,OACXnD,EAAAb,EAAAC,cAAC6D,EAAA9D,EAAD,CACI2C,MAAO,OACPJ,OAAQ,OACR0B,KAdK,aAeLC,MAdM,iBAeNzC,SAAUuC,EAAMvC,SAChB2B,aAAcY,EAAMZ,aACpBe,SAhBS,GAiBTC,YAAa,CACTC,iBAAiB,GAErBC,WAAY,CACRC,WApBO,0CAqBPC,aAAa,EACbC,UAAW","file":"static/js/main.4cbc565a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Resizable from \"re-resizable\";\nimport Button from \"@material-ui/core/Button\";\nimport PlayArrow from \"@material-ui/icons/PlayArrow\";\n\nimport \"./App.css\";\n\nimport Editor from \"./Editor\";\nconst demo = `const parentHTML = document.getElementById(\"display\"); \nconst input = \"(1+(4+5+2)-3)+(6+8)\";\n\nconst index = new Index(parentHTML);\nconst log = new Stack(parentHTML, null, \"stack3\");\n\nconst stack1 = index.createStack(\"stack1\");\nconst stack2 = index.createStack(\"stack2\");\n\ninput.split(\"\").forEach(char => {\n    switch (char) {\n        case \"(\":\n            log.push(\"(\");\n            stack1.peek();\n            break;\n        case \")\":\n            stack1.peek();\n            log.push(\")\");\n\n            const num2 = parseInt(stack1.pop());\n            log.push(num2);\n\n            const operator = stack2.pop();\n            log.push(operator);\n\n            const num1 = parseInt(stack1.pop());\n            log.push(num1);\n\n            if (operator === \"-\") {\n\n                log.push(\"result of \" + num1 + \" - \" + num2);\n                stack1.push(num1 - num2);\n            } else if (operator === \"+\") {\n\n                log.push(\"result of \" + num1 + \" + \" + num2);\n                stack1.push(num1 + num2);\n            }\n            break;\n        case \"+\":\n\n            log.push(\"+\");\n            stack2.push(\"+\");\n            break;\n        case \"-\":\n            \n            log.push(\"-\");\n            stack2.push(\"-\");\n            break;\n        default: \n            log.push(char);\n            stack1.push(char);\n    }\n});\n\nwhile (!stack2.isEmpty()) {\n\n  const num2 = parseInt(stack1.pop());\n  log.push(num2);\n\n  const operator = stack2.pop();\n  log.push(operator);\n\n  const num1 = parseInt(stack1.pop());\n  log.push(num1);\n\n  if (operator === \"-\") {\n\n      log.push(\"result of \" + num1 + \" - \" + num2);\n      stack1.push(num1 - num2);\n  } else if (operator === \"+\") {\n\n      log.push(\"result of \" + num1 + \" + \" + num2);\n      stack1.push(num1 + num2);\n  }\n}\n\nconst speed = 2000;\n\nlog.play(speed);\nindex.play(speed);\nconsole.log(stack1.peek());\n\n`;\n\nlet code = demo;\nfunction onChange(newValue: any) {\n  code = newValue;\n}\n\nconst execute = () => {\n  import(\"alchemist-core\").then(alchemist => {\n    const Stack = alchemist.Stack;\n    const Queue = alchemist.Queue;\n    const Index = alchemist.Index;\n\n    try {\n      eval(code);\n    } catch (error) {\n      console.error(error.message);\n    }\n  })\n}\n\nconst height = 720;\nconst backgroundColor = \"#002B36\";\n\nconst editor = (\n  <Resizable\n    defaultSize={{ height, width: \"50%\" }}\n    enable={{ right: true }}\n    style={{\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderRight: \"solid 1px #ddd\",\n      float: \"left\",\n      maxWidth: \"90%\"\n    }}\n  >\n    <Editor onChange={onChange} defaultValue={demo} />\n  </Resizable>\n);\n\nconst display = (\n  <div id=\"display\" style={{\n    backgroundColor,\n    height,\n    minWidth: \"5%\",\n    color: \"white\",\n  }}>\n  </div>\n);\n\nconst main = (\n  <div style={{ width: \"100%\", height: \"100%\" }}>\n    {editor}\n    {display}\n  </div>\n);\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Button onClick={execute} variant=\"outlined\">\n        <PlayArrow>RUN</PlayArrow>Play\n      </Button>\n      {main}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport AceEditor from \"react-ace\";\nimport \"brace/mode/javascript\";\nimport \"brace/theme/solarized_dark\";\n\nconst mode = \"javascript\";\nconst theme = \"solarized_dark\";\nconst fontSize = 20;\nconst fontFamily = \"'Courier New', Menlo, Monaco, monospace\";\n\nexport interface Props {\n    onChange: (value: string, event?: any) => void;\n    defaultValue: string;\n}\n\nexport default (props: Props) => (\n    <AceEditor\n        width={\"100%\"}\n        height={\"100%\"}\n        mode={mode}\n        theme={theme}\n        onChange={props.onChange}\n        defaultValue={props.defaultValue}\n        fontSize={fontSize}\n        editorProps={{\n            $blockScrolling: false,\n        }}\n        setOptions={{\n            fontFamily,\n            dragEnabled: true,\n            dragDelay: 100\n        }}\n    />\n);\n"],"sourceRoot":""}