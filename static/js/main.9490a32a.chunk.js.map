{"version":3,"sources":["serviceWorker.js","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Action","Actions","Object","_Users_dozhou_workspace_dozhou_alchemist_editor_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_actions","content","push","action","Push","value","Peek","Pop","Size","IsEmpty","Stack","hoster","table","appendChild","insertRow","insertCell","innerHTML","rows","cells","result","peek","deleteRow","length","RealStack","timerId","index","actions","stack","pop","size","isEmpty","_this","setInterval","clearInterval","decode","code","onChange","newValue","editor","react__WEBPACK_IMPORTED_MODULE_2___default","react_ace__WEBPACK_IMPORTED_MODULE_3___default","mode","theme","name","editorProps","$blockScrolling","execute","__webpack_require__","e","t","bind","alchemist","eval","error","console","message","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_7___default","container","item","xs","className","onClick","_material_ui_core_Paper__WEBPACK_IMPORTED_MODULE_8___default","id"],"mappings":"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","file":"static/js/main.9490a32a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\n\nimport AceEditor from \"react-ace\";\nimport \"brace/mode/javascript\";\nimport \"brace/theme/github\";\nimport \"./App.css\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Table } from \"../node_modules/@material-ui/core\";\n\nenum Action {\n  Push, Peek, Pop, Size, IsEmpty\n}\n\ninterface ActionHold {\n  action: Action\n  value?: any\n}\n\nclass Actions {\n  private _actions: ActionHold[];\n\n  constructor() {\n    this._actions = [];\n  }\n\n  push(content: any) {\n    this._actions.push({ action: Action.Push, value: content });\n  }\n\n  peek(): any {\n    this._actions.push({ action: Action.Peek });\n  }\n\n  pop(): any {\n    this._actions.push({ action: Action.Pop });\n  }\n\n  size(): number {\n    this._actions.push({ action: Action.Size });\n    return 1;\n  }\n\n  isEmpty(): boolean {\n    this._actions.push({ action: Action.IsEmpty });\n    return true;\n  }\n\n  get actions(): ActionHold[] {\n    return this._actions;\n  }\n}\n\nclass Stack {\n  private table: HTMLTableElement;\n\n  constructor(hoster: HTMLElement) {\n    this.table = document.createElement(\"TABLE\") as HTMLTableElement;\n    hoster.appendChild(this.table);\n  }\n\n  push(content: any): void {\n    const row = this.table.insertRow(0);\n    const cell = row.insertCell(0);\n    cell.innerHTML = content;\n  }\n\n  peek(): any {\n    return this.table.rows[0].cells[0].innerHTML;\n  }\n\n  pop(): any {\n    const result = this.peek();\n    this.table.deleteRow(0);\n    return result;\n  }\n\n  size(): number {\n    return this.table.rows.length;\n  }\n\n  isEmpty(): boolean {\n    return this.table.rows.length == 0;\n  }\n}\n\nclass RealStack {\n\n  private timerId: any;\n  private index: number;\n  private actions: Actions;\n  private stack: Stack;\n  constructor(hoster: HTMLElement) {\n    this.index = 0;\n    this.timerId = -1;\n    this.actions = new Actions();\n    this.stack = new Stack(hoster);\n  }\n\n  push(content: any): void {\n    this.actions.push(content);\n  }\n\n  peek(): void {\n    this.actions.peek();\n  }\n\n  pop(): void {\n    this.actions.pop();\n  }\n\n  size(): void {\n    this.actions.size();\n  }\n\n  isEmpty(): void {\n    this.actions.isEmpty();\n  }\n\n  run(): void {\n    this.timerId = setInterval(() => {\n      if (this.index >= this.actions.actions.length) {\n        clearInterval(this.timerId);\n      } else {\n        this.decode(this.actions.actions[this.index]);\n        this.index++;\n      }\n    }, 1000)\n  }\n\n  decode(action: ActionHold): void {\n    if (action.action === Action.Push) {\n      this.stack.push(action.value);\n    } else if (action.action === Action.Peek) {\n      this.stack.peek()\n    } else if (action.action === Action.Pop) {\n      this.stack.pop();\n    } else if (action.action === Action.Size) {\n      this.stack.size();\n    } else if (action.action === Action.IsEmpty) {\n      this.stack.isEmpty();\n    }\n  }\n}\n\nlet code = \"\";\nfunction onChange(newValue: any) {\n  code = newValue;\n}\n\nconst editor = () => {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"github\"\n      onChange={onChange}\n      name=\"UNIQUE_ID_OF_DIV\"\n      editorProps={{ $blockScrolling: true }}\n    />\n  );\n};\n\nconst App = () => {\n\n  const execute = () => {\n    import(\"alchemist-core\").then(alchemist => {\n      // const Stack = alchemist.Stack;\n      // const Queue = alchemist.Queue;\n      try {\n        eval(code);\n      } catch (error) {\n        console.error(error.message);\n      }\n    })\n  }\n\n  return (\n    // <div className=\"App\" >\n    //   <header className=\"App-header\" >\n    //     <button onClick={execute}>\n    //       RUN\n    //     </button>\n    //     {editor()}\n    //   </header>\n    // </div>\n    <Grid container>\n      <Grid item xs={8} className=\"App-header\">\n        {editor()}\n        <button onClick={execute}>RUN</button>\n      </Grid>\n      <Grid item xs={4}>\n        <Paper id=\"display\"></Paper>\n\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n"],"sourceRoot":""}