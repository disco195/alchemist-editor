{"version":3,"sources":["App.tsx","serviceWorker.js","index.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_ace__WEBPACK_IMPORTED_MODULE_1__","react_ace__WEBPACK_IMPORTED_MODULE_1___default","brace_mode_javascript__WEBPACK_IMPORTED_MODULE_2__","brace_mode_javascript__WEBPACK_IMPORTED_MODULE_2___default","brace_theme_github__WEBPACK_IMPORTED_MODULE_3__","brace_theme_github__WEBPACK_IMPORTED_MODULE_3___default","_App_css__WEBPACK_IMPORTED_MODULE_4__","_App_css__WEBPACK_IMPORTED_MODULE_4___default","code","onChange","newValue","editor","a","createElement","mode","theme","name","editorProps","$blockScrolling","execute","e","then","t","bind","alchemist","Stack","eval","error","console","message","App","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kIAAA,IAAAA,mCAAAC,oBAAA,GAAAC,2CAAAD,oBAAAE,EAAAH,oCAAAI,uCAAAH,oBAAA,IAAAI,+CAAAJ,oBAAAE,EAAAC,wCAAAE,mDAAAL,oBAAA,IAAAM,2DAAAN,oBAAAE,EAAAG,oDAAAE,gDAAAP,oBAAA,IAAAQ,wDAAAR,oBAAAE,EAAAK,iDAAAE,sCAAAT,oBAAA,IAAAU,8CAAAV,oBAAAE,EAAAO,uCASIE,KAAO,GACX,SAASC,SAASC,GAChBF,KAAOE,EAGT,IAAMC,OAAS,WACb,OACEb,2CAAAc,EAAAC,cAACZ,+CAAAW,EAAD,CACEE,KAAK,aACLC,MAAM,SACNN,SAAUA,SACVO,KAAK,mBACLC,YAAa,CAAEC,iBAAiB,MAKhCC,QAAU,SAAVA,UACJtB,oBAAAuB,EAAA,GAAAC,KAAAxB,oBAAAyB,EAAAC,KAAA,YAAyBF,KAAK,SAAAG,WAC5B,IAAMC,MAAQD,UAAUC,MACxB,IACEC,KAAKlB,MACL,MAAOmB,OACPC,QAAQD,MAAMA,MAAME,aAKpBC,IAAM,WACV,OACEhC,2CAAAc,EAAAC,cAAA,OAAKkB,UAAU,OACbjC,2CAAAc,EAAAC,cAAA,UAAQkB,UAAU,cACfpB,SACDb,2CAAAc,EAAAC,cAAA,UAAQmB,QAASb,SAAjB,UAQOW,oMCtCKG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOC,EAAA5B,EAAAC,cAACiB,EAAA,EAAD,MAASW,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.e9604794.chunk.js","sourcesContent":["import React from 'react';\n\nimport AceEditor from 'react-ace';\n// import brace from 'brace';\nimport 'brace/mode/javascript';\nimport 'brace/theme/github';\n\nimport './App.css';\n\nlet code = \"\";\nfunction onChange(newValue: any) {\n  code = newValue;\n}\n\nconst editor = () => {\n  return (\n    <AceEditor\n      mode=\"javascript\"\n      theme=\"github\"\n      onChange={onChange}\n      name=\"UNIQUE_ID_OF_DIV\"\n      editorProps={{ $blockScrolling: true }}\n    />\n  );\n};\n\nconst execute = () => {\n  import(\"alchemist-core\").then(alchemist => {\n    const Stack = alchemist.Stack;\n    try {\n      eval(code);\n    } catch (error) {\n      console.error(error.message);\n    }\n  })\n}\n\nconst App = () => {\n  return (\n    <div className=\"App\" >\n      <header className=\"App-header\" >\n        {editor()}\n        <button onClick={execute}>\n          RUN\n        </button>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}